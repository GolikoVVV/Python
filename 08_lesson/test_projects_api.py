import pytest
import requests
import random
import string

# üîë –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –∑–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—é–¥–∞ —Å–≤–æ–π –ö–õ–Æ–ß
API_KEY = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –∑–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—é–¥–∞ —Å–≤–æ–π –ö–õ–Æ–ß"

BASE_URL = "https://ru.yougile.com/api-v2"

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

def generate_random_name():
    return "Test Project " + "".join(random.choices(string.ascii_letters, k=6))


@pytest.fixture(scope="session")
def base_url():
    return BASE_URL


@pytest.fixture(scope="session")
def headers():
    return HEADERS


@pytest.fixture
def client(headers, base_url):
    class Client:
        def create_project(self, title):
            """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID"""
            url = f"{base_url}/projects"
            data = {"title": title}
            response = requests.post(url, json=data, headers=headers)
            return response.json(), response.status_code

        def get_project(self, project_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID"""
            url = f"{base_url}/projects/{project_id}"
            response = requests.get(url, headers=headers)
            json_response = response.json()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ content, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "content" in json_response:
                return json_response["content"], response.status_code
            return json_response, response.status_code

        def update_project(self, project_id, title=None, archived=None):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
            url = f"{base_url}/projects/{project_id}"
            data = {}
            if title is not None:
                data["title"] = title
            if archived is not None:
                data["archived"] = archived
            response = requests.put(url, json=data, headers=headers)
            json_response = response.json()
            if "content" in json_response:
                return json_response["content"], response.status_code
            return json_response, response.status_code

    return Client()


# === –¢–µ—Å—Ç—ã ===

def test_create_project_positive(client):
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
    title = generate_random_name()
    data, status = client.create_project(title)

    assert status == 201, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 201, –ø–æ–ª—É—á–µ–Ω {status}"
    assert "id" in data, "–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞"
    project_id = data["id"]

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    project_data, status_get = client.get_project(project_id)
    assert status_get == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"
    assert project_data["title"] == title, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º archived, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if "archived" in project_data:
        assert project_data["archived"] is False, "–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –≤ –∞—Ä—Ö–∏–≤–µ"
    else:
        print("‚ö†Ô∏è –ü–æ–ª–µ 'archived' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")

    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {project_data['title']} (ID: {project_id})")


def test_create_project_negative_no_title(client):
    """–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data, status = client.create_project(title="")

    assert status == 400, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 400, –ø–æ–ª—É—á–µ–Ω {status}"
    assert "error" in data or "message" in data
    assert "title should not be empty" in str(data.get("message", ""))
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")


def test_get_project_positive(client):
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    title = generate_random_name()
    new_project, _ = client.create_project(title)
    project_id = new_project["id"]

    data, status = client.get_project(project_id)

    assert status == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {status}"
    assert data["id"] == project_id
    assert data["title"] == title
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω: {data['title']}")


def test_get_project_negative_not_found(client):
    """–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç"""
    invalid_id = "00000000-0000-0000-0000-000000000000"
    data, status = client.get_project(invalid_id)

    assert status == 404, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 404, –ø–æ–ª—É—á–µ–Ω {status}"
    assert "error" in data
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ–µ–∫—Ç—É")


def test_update_project_positive(client):
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    old_title = generate_random_name()
    new_title = old_title + " (updated)"
    project_data, _ = client.create_project(old_title)
    project_id = project_data["id"]

    updated_data, status = client.update_project(project_id, title=new_title)

    assert status == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {status}"

    # –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ GET, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
    refreshed_data, _ = client.get_project(project_id)
    assert refreshed_data["title"] == new_title
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {refreshed_data['title']}")


def test_update_project_negative_invalid_id(client):
    """–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π: –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º ID"""
    invalid_id = "invalid-uuid-format"
    data, status = client.update_project(invalid_id, title="New Title")

    assert status in (400, 404), f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 400 –∏–ª–∏ 404, –ø–æ–ª—É—á–µ–Ω {status}"
    assert "error" in data
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID")