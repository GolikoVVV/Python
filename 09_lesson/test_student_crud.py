import pytest
from sqlalchemy import create_engine, text, MetaData, Table, Column, Integer, String, DateTime, Boolean, select
from sqlalchemy.orm import sessionmaker
import random
import string
from datetime import datetime

# üîß –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ‚Äî –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò
DB_URL = "postgresql://postgres:123@localhost:5432/QAMyFirstBase"

# –°–æ–∑–¥–∞—ë–º engine –∏ —Å–µ—Å—Å–∏—é
engine = create_engine(DB_URL, echo=False)
SessionLocal = sessionmaker(bind=engine)
session = SessionLocal()

# === –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶, –ï–°–õ–ò –ù–ï–¢ ===

def setup_tables():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã students –∏ subjects, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    with engine.connect() as conn:
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è DDL
        with conn.begin():
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS students (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    email VARCHAR(100) UNIQUE NOT NULL,
                    deleted_at TIMESTAMP DEFAULT NULL
                );
            """))
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS subjects (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    deleted_at TIMESTAMP DEFAULT NULL
                );
            """))
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã students –∏ subjects —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

# –í—ã–∑—ã–≤–∞–µ–º setup_tables() –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_tables()

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ú–Å–ù ===

def generate_random_name():
    return "Student_" + "".join(random.choices(string.ascii_letters, k=8))

# === –û–ß–ò–°–¢–ö–ê ===

def cleanup_student(student_id):
    """–ñ—ë—Å—Ç–∫–æ —É–¥–∞–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î –ø–æ ID"""
    session.execute(text("DELETE FROM students WHERE id = :id"), {"id": student_id})
    session.commit()

def cleanup_subject(subject_id):
    """–ñ—ë—Å—Ç–∫–æ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ë–î –ø–æ ID"""
    session.execute(text("DELETE FROM subjects WHERE id = :id"), {"id": subject_id})
    session.commit()

# === –¢–ï–°–¢–´ ===

def test_create_student():
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    name = generate_random_name()
    email = f"{name.lower()}@example.com"

    result = session.execute(
        text("INSERT INTO students (name, email, deleted_at) VALUES (:name, :email, NULL) RETURNING id"),
        {"name": name, "email": email}
    )
    student_id = result.scalar()
    session.commit()

    try:
        fetched = session.execute(
            text("SELECT name, email FROM students WHERE id = :id"),
            {"id": student_id}
        ).fetchone()

        assert fetched is not None, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
        assert fetched.name == name
        assert fetched.email == email
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {name} (ID: {student_id})")
    finally:
        cleanup_student(student_id)


def test_update_student():
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    original_name = generate_random_name()
    original_email = f"{original_name.lower()}@example.com"

    result = session.execute(
        text("INSERT INTO students (name, email, deleted_at) VALUES (:name, :email, NULL) RETURNING id"),
        {"name": original_name, "email": original_email}
    )
    student_id = result.scalar()
    session.commit()

    try:
        new_name = original_name + "_Updated"
        new_email = f"updated_{original_name.lower()}@example.com"

        session.execute(
            text("UPDATE students SET name = :name, email = :email WHERE id = :id"),
            {"name": new_name, "email": new_email, "id": student_id}
        )
        session.commit()

        fetched = session.execute(
            text("SELECT name, email FROM students WHERE id = :id"),
            {"id": student_id}
        ).fetchone()

        assert fetched.name == new_name
        assert fetched.email == new_email
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {new_name}")
    finally:
        cleanup_student(student_id)


def test_soft_delete_student():
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    name = generate_random_name()
    email = f"{name.lower()}@example.com"

    result = session.execute(
        text("INSERT INTO students (name, email, deleted_at) VALUES (:name, :email, NULL) RETURNING id"),
        {"name": name, "email": email}
    )
    student_id = result.scalar()
    session.commit()

    try:
        active = session.execute(
            text("SELECT 1 FROM students WHERE id = :id AND deleted_at IS NULL"),
            {"id": student_id}
        ).fetchone()
        assert active is not None, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"

        session.execute(
            text("UPDATE students SET deleted_at = NOW() WHERE id = :id"),
            {"id": student_id}
        )
        session.commit()

        is_deleted = session.execute(
            text("SELECT deleted_at FROM students WHERE id = :id"),
            {"id": student_id}
        ).fetchone()

        assert is_deleted.deleted_at is not None
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π: ID {student_id}")
    finally:
        cleanup_student(student_id)


def test_delete_subject():
    """–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_name = "Subject_" + "".join(random.choices(string.ascii_uppercase, k=6))

    result = session.execute(
        text("INSERT INTO subjects (name, deleted_at) VALUES (:name, NULL) RETURNING id"),
        {"name": subject_name}
    )
    subject_id = result.scalar()
    session.commit()

    try:
        found = session.execute(
            text("SELECT 1 FROM subjects WHERE id = :id AND deleted_at IS NULL"),
            {"id": subject_id}
        ).fetchone()
        assert found is not None

        session.execute(
            text("UPDATE subjects SET deleted_at = NOW() WHERE id = :id"),
            {"id": subject_id}
        )
        session.commit()

        deleted = session.execute(
            text("SELECT deleted_at FROM subjects WHERE id = :id"),
            {"id": subject_id}
        ).fetchone()

        assert deleted.deleted_at is not None
        print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π: {subject_name}")
    finally:
        cleanup_subject(subject_id)