import time
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
class LoginPage:
    def __init__(self, driver):
        self.driver = driver
        self.url = "https://www.saucedemo.com/"

    def open(self):
        self.driver.get(self.url)
        print("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    def enter_username(self, username):
        username_field = WebDriverWait(self.driver, 15).until(
            EC.presence_of_element_located((By.ID, "user-name"))
        )
        username_field.clear()
        username_field.send_keys(username)

    def enter_password(self, password):
        password_field = WebDriverWait(self.driver, 15).until(
            EC.presence_of_element_located((By.ID, "password"))
        )
        password_field.clear()
        password_field.send_keys(password)

    def click_login(self):
        # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º Login
        print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º...")
        time.sleep(2)

        login_button = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.ID, "login-button"))
        )
        login_button.click()
        print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Login")
        time.sleep(10)

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ===
class InventoryPage:
    def __init__(self, driver):
        self.driver = driver

    def add_backpack_to_cart(self):
        add_button = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.ID, "add-to-cart-sauce-labs-backpack"))
        )
        add_button.click()
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Sauce Labs Backpack")
        time.sleep(2)

    def add_bolt_tshirt_to_cart(self):
        add_button = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.ID, "add-to-cart-sauce-labs-bolt-t-shirt"))
        )
        add_button.click()
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Sauce Labs Bolt T-Shirt")
        time.sleep(2)

    def add_onesie_to_cart(self):
        add_button = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.ID, "add-to-cart-sauce-labs-onesie"))
        )
        add_button.click()
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Sauce Labs Onesie")
        time.sleep(2)

    def go_to_cart(self):
        cart_link = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.CLASS_NAME, "shopping_cart_link"))
        )
        cart_link.click()
        print("üõí –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É")
        time.sleep(2)

# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã ===
class CartPage:
    def __init__(self, driver):
        self.driver = driver

    def verify_cart_has_three_items(self):
        items = self.driver.find_elements(By.CLASS_NAME, "cart_item")
        assert len(items) == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 —Ç–æ–≤–∞—Ä–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(items)}"
        print("‚úÖ –í –∫–æ—Ä–∑–∏–Ω–µ 3 —Ç–æ–≤–∞—Ä–∞")

    def click_checkout(self):
        checkout_button = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.ID, "checkout"))
        )
        checkout_button.click()
        print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Checkout")


# === –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ===
class CheckoutPage:
    def __init__(self, driver):
        self.driver = driver

    def fill_personal_info(self, first_name, last_name, postal_code):
        WebDriverWait(self.driver, 15).until(
            EC.presence_of_element_located((By.ID, "first-name"))
        ).send_keys(first_name)

        self.driver.find_element(By.ID, "last-name").send_keys(last_name)
        self.driver.find_element(By.ID, "postal-code").send_keys(postal_code)

        continue_button = self.driver.find_element(By.ID, "continue")
        continue_button.click()
        print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")

    def get_total_amount(self) -> float:
        total_element = WebDriverWait(self.driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "summary_total_label"))
        )
        total_text = total_element.text.strip()  # –ü—Ä–∏–º–µ—Ä: "Total: $58.29"
        return float(total_text.replace("Total: $", ""))


# === –§–∏–∫—Å—Ç—É—Ä–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –±–µ–∑ undetected-chromedriver ===
@pytest.fixture
def driver():
    options = Options()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-infobars")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-plugins-discovery")
    options.add_argument("--disable-notifications")
    options.add_argument("--no-first-run")
    options.add_argument("--no-default-browser-check")
    options.add_argument("--disable-web-security")
    options.add_argument("--allow-running-insecure-content")
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
    )

    # –£–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)

    driver = webdriver.Chrome(options=options)

    # –û–±–º–∞–Ω—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebDriver
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => false});")

    yield driver
    driver.quit()


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç ===
def test_purchase_three_items_and_verify_total(driver):
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: –ø–æ–∫—É–ø–∫–∞ —Ç—Ä—ë—Ö —Ç–æ–≤–∞—Ä–æ–≤")

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
    login_page = LoginPage(driver)
    inventory_page = InventoryPage(driver)
    cart_page = CartPage(driver)
    checkout_page = CheckoutPage(driver)

    # === 1. –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç ===
    login_page.open()

    # === 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ standard_user ===
    login_page.enter_username("standard_user")
    login_page.enter_password("secret_sauce")
    login_page.click_login()  # —Å –ø–∞—É–∑–æ–π 2 —Å–µ–∫—É–Ω–¥—ã

    # === 3. –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏ —Ç–æ–≤–∞—Ä–∞ ===
    inventory_page.add_backpack_to_cart()
    inventory_page.add_bolt_tshirt_to_cart()
    inventory_page.add_onesie_to_cart()

    # === 4. –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É ===
    inventory_page.go_to_cart()

    # === 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–∞—Ç—å Checkout ===
    cart_page.verify_cart_has_three_items()
    cart_page.click_checkout()

    # === 6. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É ===
    checkout_page.fill_personal_info("–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤", "123456")

    # === 7. –ü–æ–ª—É—á–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É ===
    total = checkout_page.get_total_amount()
    print(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${total}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å $58.29
    assert abs(total - 58.29) < 0.01, f"–û–∂–∏–¥–∞–ª–æ—Å—å $58.29, –ø–æ–ª—É—á–µ–Ω–æ: ${total}"
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–µ—Ä–Ω–∞ ‚Äî $58.29")